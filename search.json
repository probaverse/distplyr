[{"path":[]},{"path":"https://distplyr.probaverse.com/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://distplyr.probaverse.com/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://distplyr.probaverse.com/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://distplyr.probaverse.com/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://distplyr.probaverse.com/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement vincenzo.coia@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://distplyr.probaverse.com/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://distplyr.probaverse.com/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://distplyr.probaverse.com/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://distplyr.probaverse.com/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://distplyr.probaverse.com/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://distplyr.probaverse.com/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"https://distplyr.probaverse.com/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to distplyr","title":"Contributing to distplyr","text":"outlines propose change distplyr. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://distplyr.probaverse.com/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to distplyr","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://distplyr.probaverse.com/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to distplyr","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://distplyr.probaverse.com/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to distplyr","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"vincenzocoia/distplyr\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://distplyr.probaverse.com/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to distplyr","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://distplyr.probaverse.com/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to distplyr","text":"Please note distplyr project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://distplyr.probaverse.com/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 distplyr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://distplyr.probaverse.com/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with distplyr","title":"Getting help with distplyr","text":"Thanks using distplyr! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://distplyr.probaverse.com/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with distplyr","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://distplyr.probaverse.com/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with distplyr","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://distplyr.probaverse.com/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with distplyr","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":[]},{"path":"https://distplyr.probaverse.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Vincenzo Coia. Author, maintainer. Amogh Joshi. Author. Shuyi Tan. Author. Zhipeng Zhu. Author.","code":""},{"path":"https://distplyr.probaverse.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Coia V, Joshi , Tan S, Zhu Z (2025). distplyr: Manipulation Univariate Distributions. R package version 0.1.5, https://distplyr.probaverse.com/.","code":"@Manual{,   title = {distplyr: Manipulation of Univariate Distributions},   author = {Vincenzo Coia and Amogh Joshi and Shuyi Tan and Zhipeng Zhu},   year = {2025},   note = {R package version 0.1.5},   url = {https://distplyr.probaverse.com/}, }"},{"path":"https://distplyr.probaverse.com/index.html","id":"distplyr-","dir":"","previous_headings":"","what":"Manipulation of Univariate Distributions","title":"Manipulation of Univariate Distributions","text":"distplyr breathes life probability distributions providing grammar modification reshaping. works seamlessly distribution objects distionary package. distplyr package name inspired dplyr R package: whereas distplyr provides grammar manipulating distributions, dplyr provides grammar manipulating data.","code":""},{"path":"https://distplyr.probaverse.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Manipulation of Univariate Distributions","text":"distplyr CRAN yet, best way install :","code":"remotes::install_github(\"probaverse/distplyr\")"},{"path":"https://distplyr.probaverse.com/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic Usage","title":"Manipulation of Univariate Distributions","text":"Want model count variable starts 1, 0? Consider shifting Poisson distribution. ’s probability mass function:  , maybe positive continuous data ’d like tail continue exponential distribution: ’s survival function:  maybe ’d like mix empirical Exponential distributions:","code":"library(distplyr) (d1 <- dst_pois(1.5) + 1) #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 enframe_pmf(d1, at = 0:10) |>   plot() x <- c(1.6, 0.9, 0.2, 1.4, 0.4, 0.3, 0.2, 0.4, 0.2, 1.5) mu <- mean(x) (d2 <- dst_empirical(x) |>   graft_right(dst_exp(mu), breakpoint = max(x))) #> Mixture Distribution #>  #> Components:  #> # A tibble: 2 × 4 #>   distributions probs breakpoint include #>   <list>        <dbl>      <dbl> <lgl>   #> 1 <finite>        0.9        1.6 FALSE   #> 2 <slic_lft>      0.1        1.6 FALSE plot(d2, \"survival\", from = 0, to = 5, n = 1000) (d4 <- mix(dst_empirical(x), dst_exp(mu))) #> Mixture Distribution #>  #> Components:  #> # A tibble: 2 × 2 #>   distributions probs #>   <list>        <dbl> #> 1 <finite>        0.5 #> 2 <exp>           0.5 plot(d4, \"survival\", from = 0, to = 5, n = 1000)"},{"path":"https://distplyr.probaverse.com/index.html","id":"distplyr-in-context","dir":"","previous_headings":"","what":"distplyr in Context","title":"Manipulation of Univariate Distributions","text":"R packages handle probability distributions. key differentiator distplyr grammar, flexibility package distionary, distplyr sits top . examples: Development distributional appears happened time distplyr, distributional uses similar family functions – dist_*() – make probability distributions. distr package allows make distributions including empirical ones, transform , using S4 classes, interface complex. distplyr aims provide human-centric interface providing grammar.","code":""},{"path":"https://distplyr.probaverse.com/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Manipulation of Univariate Distributions","text":"creation distplyr possible without support R Consortium, Natural Science Engineering Research Council Canada (NSERC), University British Columbia, BGC Engineering Inc.","code":""},{"path":"https://distplyr.probaverse.com/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Manipulation of Univariate Distributions","text":"Please note distplyr project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://distplyr.probaverse.com/reference/discretise.html","id":null,"dir":"Reference","previous_headings":"","what":"Discretise a Distribution — discretise","title":"Discretise a Distribution — discretise","text":"Bins distribution specified breakpoints. Left right endpoints +/- infinity implied.","code":""},{"path":"https://distplyr.probaverse.com/reference/discretise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discretise a Distribution — discretise","text":"","code":"discretise(   distribution,   breakpoints,   midpoints = c(\"median\", \"mean\", \"label\"),   values,   closed = c(\"right\", \"left\") )  discretize(   distribution,   breakpoints,   midpoints = c(\"median\", \"mean\", \"label\"),   values,   closed = c(\"right\", \"left\") )"},{"path":"https://distplyr.probaverse.com/reference/discretise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discretise a Distribution — discretise","text":"distribution Distribution discretise. breakpoints Vector breakpoints separating bin. midpoints, values Specify values associated new bin either specifying computation midpoint, vector values (length one breakpoints) applied bins smallest largest. specified, values override midpoint. closed intervals closed left right? One \"right\" (default) \"left\".","code":""},{"path":"https://distplyr.probaverse.com/reference/discretise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discretise a Distribution — discretise","text":"finite distribution specified bins.","code":""},{"path":"https://distplyr.probaverse.com/reference/discretise.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Discretise a Distribution — discretise","text":"NA breakpoints values (specified) silently removed. throw error lengths values end one breakpoints.","code":""},{"path":"https://distplyr.probaverse.com/reference/discretise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discretise a Distribution — discretise","text":"","code":"p1 <- dst_norm(0, 1) p2 <- discretise(p1, breakpoints = -2:2) p3 <- discretise(p1, breakpoints = -2:2, midpoints = \"mean\") plot(p1, \"cdf\", from = -3, to = 3) plot(p2, \"cdf\", from = -3, to = 3, add = TRUE, col = \"blue\", n = 1000) plot(p3, \"cdf\", from = -3, to = 3, add = TRUE, col = \"red\", n = 1000)   discretise(dst_exp(0.1), breakpoints = numeric()) #> [1] \"degenerate\" \"finite\"     \"dst\"        #>  #>  probabilities : #> # A tibble: 1 × 2 #>   location  size #>      <dbl> <dbl> #> 1     6.93     1  dst_norm(0, 1) %>%   slice_left(-2) %>%   slice_right(2) %>%   discretize(-2:2) #> [1] \"finite\" \"dst\"    #>  #>  probabilities : #> # A tibble: 4 × 2 #>   location  size #>      <dbl> <dbl> #> 1   -1.34  0.142 #> 2   -0.442 0.358 #> 3    0.442 0.358 #> 4    1.34  0.142"},{"path":"https://distplyr.probaverse.com/reference/distplyr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"distplyr: Manipulation of Univariate Distributions — distplyr-package","title":"distplyr: Manipulation of Univariate Distributions — distplyr-package","text":"Provides interface manipulating univariate probability distributions, using verbs `graft`, `slice`, `mix`, `shift`, others.","code":""},{"path":[]},{"path":"https://distplyr.probaverse.com/reference/distplyr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"distplyr: Manipulation of Univariate Distributions — distplyr-package","text":"Maintainer: Vincenzo Coia vincenzo.coia@stat.ubc.ca Authors: Amogh Joshi Shuyi Tan Zhipeng Zhu","code":""},{"path":"https://distplyr.probaverse.com/reference/dots_to_dsts.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Distributions in Ellipsis to List — dots_to_dsts","title":"Convert Distributions in Ellipsis to List — dots_to_dsts","text":"Flattens distributions placed ellipsis argument list, ellipsis can include distributions lists distributions.","code":""},{"path":"https://distplyr.probaverse.com/reference/dots_to_dsts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Distributions in Ellipsis to List — dots_to_dsts","text":"","code":"dots_to_dsts(..., na.rm = FALSE)"},{"path":"https://distplyr.probaverse.com/reference/dots_to_dsts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Distributions in Ellipsis to List — dots_to_dsts","text":"... Distribution objects, lists distributions. na.rm Logical; remove NA entries? Note NULL entries always removed.","code":""},{"path":"https://distplyr.probaverse.com/reference/dots_to_dsts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Distributions in Ellipsis to List — dots_to_dsts","text":"list distributions contained ..., NULL entries discarded. distributions present, returns list().","code":""},{"path":"https://distplyr.probaverse.com/reference/dots_to_dsts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Distributions in Ellipsis to List — dots_to_dsts","text":"error thrown , discarding NULL entries, ... contains non-distributions. function essentially wrapper around rlang::flatten().","code":""},{"path":"https://distplyr.probaverse.com/reference/dots_to_dsts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Distributions in Ellipsis to List — dots_to_dsts","text":"","code":"d <- dst_norm(0, 1) distplyr:::dots_to_dsts(d, list(d, d), NULL) #> [[1]] #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\" #>  #> [[2]] #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\" #>  #> [[3]] #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\" #>"},{"path":"https://distplyr.probaverse.com/reference/flip.finite.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear Transformations — flip.finite","title":"Linear Transformations — flip.finite","text":"shift() distribution adding constant, multiply() distribution constant. flip() specific case multiplying distribution -1, resulting \"flipping\" distribution 0.","code":""},{"path":"https://distplyr.probaverse.com/reference/flip.finite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear Transformations — flip.finite","text":"","code":"flip.finite(distribution)"},{"path":"https://distplyr.probaverse.com/reference/flip.finite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear Transformations — flip.finite","text":"distribution probability distribution.","code":""},{"path":"https://distplyr.probaverse.com/reference/flip.finite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear Transformations — flip.finite","text":"distribution, shifted multiplied constant. Specifically, distribution subclass \"shift\", \"scale\", \"flip\".","code":""},{"path":"https://distplyr.probaverse.com/reference/flip.finite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear Transformations — flip.finite","text":"Specifically, X random variable coming distribution, resulting distributions follows: shift(), distribution X + constant. multiply(), distribution X * constant. flip(), distribution -X. Although multiply() function accepts negative constants, corresponding \"scale\" distribution class holds positive constants, delegating potential negative sign \"flip\" class.","code":""},{"path":"https://distplyr.probaverse.com/reference/flip.finite.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Linear Transformations — flip.finite","text":"can also use binary operations +, -, *, / access transformations.","code":""},{"path":[]},{"path":"https://distplyr.probaverse.com/reference/flip.finite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear Transformations — flip.finite","text":"","code":"d_pois <- distionary::dst_pois(1.1) d_norm <- distionary::dst_norm(4, 1) d_unif <- distionary::dst_unif(0, 1)  # Shift a Poisson distribution by 1. shift(d_pois, 1) #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 #>  d_pois + 1 #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 #>   # Multiply a Uniform distribution by 2. multiply(d_unif, 2) #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"unif\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"unif\" #>  #> $scale #> [1] 2 #>  d_unif * 2 #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"unif\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"unif\" #>  #> $scale #> [1] 2 #>   # Flip a Normal distribution. flip(d_norm) #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\" -d_norm #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\"  # Combine multiple operations: 4 - 2 * d_pois #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $scale #> [1] 2 #>  #>  #> $shift #> [1] 4 #>"},{"path":"https://distplyr.probaverse.com/reference/flip.norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear Transformations — flip.norm","title":"Linear Transformations — flip.norm","text":"shift() distribution adding constant, multiply() distribution constant. flip() specific case multiplying distribution -1, resulting \"flipping\" distribution 0.","code":""},{"path":"https://distplyr.probaverse.com/reference/flip.norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear Transformations — flip.norm","text":"","code":"flip.norm(distribution)"},{"path":"https://distplyr.probaverse.com/reference/flip.norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear Transformations — flip.norm","text":"distribution probability distribution.","code":""},{"path":"https://distplyr.probaverse.com/reference/flip.norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear Transformations — flip.norm","text":"distribution, shifted multiplied constant. Specifically, distribution subclass \"shift\", \"scale\", \"flip\".","code":""},{"path":"https://distplyr.probaverse.com/reference/flip.norm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear Transformations — flip.norm","text":"Specifically, X random variable coming distribution, resulting distributions follows: shift(), distribution X + constant. multiply(), distribution X * constant. flip(), distribution -X. Although multiply() function accepts negative constants, corresponding \"scale\" distribution class holds positive constants, delegating potential negative sign \"flip\" class.","code":""},{"path":"https://distplyr.probaverse.com/reference/flip.norm.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Linear Transformations — flip.norm","text":"can also use binary operations +, -, *, / access transformations.","code":""},{"path":[]},{"path":"https://distplyr.probaverse.com/reference/flip.norm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear Transformations — flip.norm","text":"","code":"d_pois <- distionary::dst_pois(1.1) d_norm <- distionary::dst_norm(4, 1) d_unif <- distionary::dst_unif(0, 1)  # Shift a Poisson distribution by 1. shift(d_pois, 1) #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 #>  d_pois + 1 #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 #>   # Multiply a Uniform distribution by 2. multiply(d_unif, 2) #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"unif\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"unif\" #>  #> $scale #> [1] 2 #>  d_unif * 2 #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"unif\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"unif\" #>  #> $scale #> [1] 2 #>   # Flip a Normal distribution. flip(d_norm) #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\" -d_norm #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\"  # Combine multiple operations: 4 - 2 * d_pois #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $scale #> [1] 2 #>  #>  #> $shift #> [1] 4 #>"},{"path":"https://distplyr.probaverse.com/reference/flip.unif.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear Transformations — flip.unif","title":"Linear Transformations — flip.unif","text":"shift() distribution adding constant, multiply() distribution constant. flip() specific case multiplying distribution -1, resulting \"flipping\" distribution 0.","code":""},{"path":"https://distplyr.probaverse.com/reference/flip.unif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear Transformations — flip.unif","text":"","code":"flip.unif(distribution)"},{"path":"https://distplyr.probaverse.com/reference/flip.unif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear Transformations — flip.unif","text":"distribution probability distribution.","code":""},{"path":"https://distplyr.probaverse.com/reference/flip.unif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear Transformations — flip.unif","text":"distribution, shifted multiplied constant. Specifically, distribution subclass \"shift\", \"scale\", \"flip\".","code":""},{"path":"https://distplyr.probaverse.com/reference/flip.unif.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear Transformations — flip.unif","text":"Specifically, X random variable coming distribution, resulting distributions follows: shift(), distribution X + constant. multiply(), distribution X * constant. flip(), distribution -X. Although multiply() function accepts negative constants, corresponding \"scale\" distribution class holds positive constants, delegating potential negative sign \"flip\" class.","code":""},{"path":"https://distplyr.probaverse.com/reference/flip.unif.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Linear Transformations — flip.unif","text":"can also use binary operations +, -, *, / access transformations.","code":""},{"path":[]},{"path":"https://distplyr.probaverse.com/reference/flip.unif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear Transformations — flip.unif","text":"","code":"d_pois <- distionary::dst_pois(1.1) d_norm <- distionary::dst_norm(4, 1) d_unif <- distionary::dst_unif(0, 1)  # Shift a Poisson distribution by 1. shift(d_pois, 1) #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 #>  d_pois + 1 #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 #>   # Multiply a Uniform distribution by 2. multiply(d_unif, 2) #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"unif\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"unif\" #>  #> $scale #> [1] 2 #>  d_unif * 2 #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"unif\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"unif\" #>  #> $scale #> [1] 2 #>   # Flip a Normal distribution. flip(d_norm) #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\" -d_norm #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\"  # Combine multiple operations: 4 - 2 * d_pois #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $scale #> [1] 2 #>  #>  #> $shift #> [1] 4 #>"},{"path":"https://distplyr.probaverse.com/reference/graft.html","id":null,"dir":"Reference","previous_headings":"","what":"Graft Distribution — graft_right","title":"Graft Distribution — graft_right","text":"Replace distribution's tail. graft_left() takes base distribution grafts distribution left breakpoint; graft_right() grafts distribution right. distribution grafted sliced breakpoint fit base distribution also breakpoint.","code":""},{"path":"https://distplyr.probaverse.com/reference/graft.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graft Distribution — graft_right","text":"","code":"graft_right(distribution, graft, breakpoint, include = FALSE)  graft_left(distribution, graft, breakpoint, include = FALSE)  is_graft(object)"},{"path":"https://distplyr.probaverse.com/reference/graft.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graft Distribution — graft_right","text":"distribution Base distribution graft distribution grafted. breakpoint location graft include Logical; include breakpoint base distribution? object Object tested","code":""},{"path":"https://distplyr.probaverse.com/reference/graft.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graft Distribution — graft_right","text":"Graft distribution object, special type mixture distribution.","code":""},{"path":"https://distplyr.probaverse.com/reference/graft.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graft Distribution — graft_right","text":"","code":"set.seed(1) x <- stats::rcauchy(100) base <- distionary::dst_empirical(x) q <- distionary::eval_quantile(base, at = 0.9) right <- distionary::dst_gpd(q, 5, 1) g <- graft_right(base, right, breakpoint = q) #plot(g, \"cdf\", n = 1001, to = 34) #plot(base, \"cdf\", n = 1001, lty = 2, add = TRUE)"},{"path":"https://distplyr.probaverse.com/reference/invert.finite.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse Distribution — invert.finite","title":"Inverse Distribution — invert.finite","text":"Access inverse distribution. Specifically, X random variable coming distribution, invert() returns distribution 1 / X.","code":""},{"path":"https://distplyr.probaverse.com/reference/invert.finite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse Distribution — invert.finite","text":"","code":"invert.finite(distribution)"},{"path":"https://distplyr.probaverse.com/reference/invert.finite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse Distribution — invert.finite","text":"distribution probability distribution.","code":""},{"path":"https://distplyr.probaverse.com/reference/invert.finite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse Distribution — invert.finite","text":"inverse distribution. Specifically, distribution subclass \"inverse\".","code":""},{"path":"https://distplyr.probaverse.com/reference/invert.finite.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Inverse Distribution — invert.finite","text":"error returned original distribution 0 possible outcome (.e., eval_pmf(distribution, = 0, strict = FALSE) non-zero), 0 reciprocal. can also obtain inverse distribution putting distribution denominator /.","code":""},{"path":[]},{"path":"https://distplyr.probaverse.com/reference/invert.finite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverse Distribution — invert.finite","text":"","code":"1 / (distionary::dst_pois(3.4) + 1) #> [1] \"inverse\" \"dst\"     #>  #>  distribution : #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 #>  invert(distionary::dst_norm(0, 1)) #> [1] \"inverse\" \"dst\"     #>  #>  distribution : #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\""},{"path":"https://distplyr.probaverse.com/reference/invert.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse Distribution — invert","title":"Inverse Distribution — invert","text":"Access inverse distribution. Specifically, X random variable coming distribution, invert() returns distribution 1 / X.","code":""},{"path":"https://distplyr.probaverse.com/reference/invert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse Distribution — invert","text":"","code":"invert(distribution)"},{"path":"https://distplyr.probaverse.com/reference/invert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse Distribution — invert","text":"distribution probability distribution.","code":""},{"path":"https://distplyr.probaverse.com/reference/invert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse Distribution — invert","text":"inverse distribution. Specifically, distribution subclass \"inverse\".","code":""},{"path":"https://distplyr.probaverse.com/reference/invert.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Inverse Distribution — invert","text":"error returned original distribution 0 possible outcome (.e., eval_pmf(distribution, = 0, strict = FALSE) non-zero), 0 reciprocal. can also obtain inverse distribution putting distribution denominator /.","code":""},{"path":[]},{"path":"https://distplyr.probaverse.com/reference/invert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverse Distribution — invert","text":"","code":"1 / (distionary::dst_pois(3.4) + 1) #> [1] \"inverse\" \"dst\"     #>  #>  distribution : #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 #>  invert(distionary::dst_norm(0, 1)) #> [1] \"inverse\" \"dst\"     #>  #>  distribution : #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\""},{"path":"https://distplyr.probaverse.com/reference/linear_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear Transformations — flip","title":"Linear Transformations — flip","text":"shift() distribution adding constant, multiply() distribution constant. flip() specific case multiplying distribution -1, resulting \"flipping\" distribution 0.","code":""},{"path":"https://distplyr.probaverse.com/reference/linear_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear Transformations — flip","text":"","code":"flip(distribution)  multiply(distribution, constant)  shift(distribution, constant)"},{"path":"https://distplyr.probaverse.com/reference/linear_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear Transformations — flip","text":"distribution probability distribution. constant single numeric shift multiply distribution .","code":""},{"path":"https://distplyr.probaverse.com/reference/linear_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear Transformations — flip","text":"distribution, shifted multiplied constant. Specifically, distribution subclass \"shift\", \"scale\", \"flip\".","code":""},{"path":"https://distplyr.probaverse.com/reference/linear_transform.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear Transformations — flip","text":"Specifically, X random variable coming distribution, resulting distributions follows: shift(), distribution X + constant. multiply(), distribution X * constant. flip(), distribution -X. Although multiply() function accepts negative constants, corresponding \"scale\" distribution class holds positive constants, delegating potential negative sign \"flip\" class.","code":""},{"path":"https://distplyr.probaverse.com/reference/linear_transform.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Linear Transformations — flip","text":"can also use binary operations +, -, *, / access transformations.","code":""},{"path":[]},{"path":"https://distplyr.probaverse.com/reference/linear_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear Transformations — flip","text":"","code":"d_pois <- distionary::dst_pois(1.1) d_norm <- distionary::dst_norm(4, 1) d_unif <- distionary::dst_unif(0, 1)  # Shift a Poisson distribution by 1. shift(d_pois, 1) #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 #>  d_pois + 1 #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 #>   # Multiply a Uniform distribution by 2. multiply(d_unif, 2) #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"unif\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"unif\" #>  #> $scale #> [1] 2 #>  d_unif * 2 #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"unif\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"unif\" #>  #> $scale #> [1] 2 #>   # Flip a Normal distribution. flip(d_norm) #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\" -d_norm #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\"  # Combine multiple operations: 4 - 2 * d_pois #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $scale #> [1] 2 #>  #>  #> $shift #> [1] 4 #>"},{"path":"https://distplyr.probaverse.com/reference/maximise.html","id":null,"dir":"Reference","previous_headings":"","what":"Max Value of Several Distributions — maximise","title":"Max Value of Several Distributions — maximise","text":"collection distributions, function provides distribution maximum value independent draws component distribution.","code":""},{"path":"https://distplyr.probaverse.com/reference/maximise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Max Value of Several Distributions — maximise","text":"","code":"maximise(..., draws = 1)  maximize(..., draws = 1)"},{"path":"https://distplyr.probaverse.com/reference/maximise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Max Value of Several Distributions — maximise","text":"... Distribution objects, lists distributions. draws Number draws distribution considered maximum. Either single numeric applying distributions ..., vector matching number distributions ....","code":""},{"path":"https://distplyr.probaverse.com/reference/maximise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Max Value of Several Distributions — maximise","text":"distribution class \"max\".","code":""},{"path":"https://distplyr.probaverse.com/reference/maximise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Max Value of Several Distributions — maximise","text":"use precise language, X1, ..., Xp p independent random variables corresponding distributions ..., distribution returned max(X1, ..., Xp).","code":""},{"path":"https://distplyr.probaverse.com/reference/minimise.html","id":null,"dir":"Reference","previous_headings":"","what":"Min Value of Several Distributions — minimise","title":"Min Value of Several Distributions — minimise","text":"collection distributions, function provides distribution minimum value independent draws component distribution.","code":""},{"path":"https://distplyr.probaverse.com/reference/minimise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Min Value of Several Distributions — minimise","text":"","code":"minimise(..., draws = 1)  minimize(..., draws = 1)"},{"path":"https://distplyr.probaverse.com/reference/minimise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Min Value of Several Distributions — minimise","text":"... Distribution objects, lists distributions. draws Number draws distribution considered minimum. Either single numeric applying distributions ..., vector matching number distributions ....","code":""},{"path":"https://distplyr.probaverse.com/reference/minimise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Min Value of Several Distributions — minimise","text":"distribution class \"min\".","code":""},{"path":"https://distplyr.probaverse.com/reference/minimise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Min Value of Several Distributions — minimise","text":"use precise language, X1, ..., Xp p independent random variables corresponding distributions ..., distribution returned min(X1, ..., Xp).","code":""},{"path":"https://distplyr.probaverse.com/reference/mix.html","id":null,"dir":"Reference","previous_headings":"","what":"Mixture Distributions — mix","title":"Mixture Distributions — mix","text":"Create mixture distribution.","code":""},{"path":"https://distplyr.probaverse.com/reference/mix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mixture Distributions — mix","text":"","code":"mix(..., weights = 1, na.rm = FALSE)  is_mix(object)  is.mix(object)"},{"path":"https://distplyr.probaverse.com/reference/mix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mixture Distributions — mix","text":"... Distribution objects, lists distributions. weights Vector weights corresponding distributions; , single numeric equal weights. na.rm Remove NA distributions NA weights? TRUE yes; default FALSE. object Object tested","code":""},{"path":"https://distplyr.probaverse.com/reference/mix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mixture Distributions — mix","text":"mixture distribution – empty distribution weights NA na.rm = FALSE, default.","code":""},{"path":"https://distplyr.probaverse.com/reference/mix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mixture Distributions — mix","text":"","code":"a <- distionary::dst_norm(0, 1) b <- distionary::dst_norm(5, 2) m1 <- mix(a, b, weights = c(1, 4)) #plot(m1) distionary::variable(m1) #> [1] \"continuous\"  c <- distionary::dst_empirical(0:6) m2 <- mix(a, b, c, weights = c(0.2, 0.5, 0.3)) #plot(m2, n = 1001) distionary::variable(m2) #> [1] \"mixed\""},{"path":"https://distplyr.probaverse.com/reference/multiply.finite.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear Transformations — multiply.finite","title":"Linear Transformations — multiply.finite","text":"shift() distribution adding constant, multiply() distribution constant. flip() specific case multiplying distribution -1, resulting \"flipping\" distribution 0.","code":""},{"path":"https://distplyr.probaverse.com/reference/multiply.finite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear Transformations — multiply.finite","text":"","code":"multiply.finite(distribution, constant)"},{"path":"https://distplyr.probaverse.com/reference/multiply.finite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear Transformations — multiply.finite","text":"distribution probability distribution. constant single numeric shift multiply distribution .","code":""},{"path":"https://distplyr.probaverse.com/reference/multiply.finite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear Transformations — multiply.finite","text":"distribution, shifted multiplied constant. Specifically, distribution subclass \"shift\", \"scale\", \"flip\".","code":""},{"path":"https://distplyr.probaverse.com/reference/multiply.finite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear Transformations — multiply.finite","text":"Specifically, X random variable coming distribution, resulting distributions follows: shift(), distribution X + constant. multiply(), distribution X * constant. flip(), distribution -X. Although multiply() function accepts negative constants, corresponding \"scale\" distribution class holds positive constants, delegating potential negative sign \"flip\" class.","code":""},{"path":"https://distplyr.probaverse.com/reference/multiply.finite.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Linear Transformations — multiply.finite","text":"can also use binary operations +, -, *, / access transformations.","code":""},{"path":[]},{"path":"https://distplyr.probaverse.com/reference/multiply.finite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear Transformations — multiply.finite","text":"","code":"d_pois <- distionary::dst_pois(1.1) d_norm <- distionary::dst_norm(4, 1) d_unif <- distionary::dst_unif(0, 1)  # Shift a Poisson distribution by 1. shift(d_pois, 1) #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 #>  d_pois + 1 #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 #>   # Multiply a Uniform distribution by 2. multiply(d_unif, 2) #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"unif\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"unif\" #>  #> $scale #> [1] 2 #>  d_unif * 2 #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"unif\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"unif\" #>  #> $scale #> [1] 2 #>   # Flip a Normal distribution. flip(d_norm) #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\" -d_norm #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\"  # Combine multiple operations: 4 - 2 * d_pois #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $scale #> [1] 2 #>  #>  #> $shift #> [1] 4 #>"},{"path":"https://distplyr.probaverse.com/reference/multiply.gpd.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear Transformations — multiply.gpd","title":"Linear Transformations — multiply.gpd","text":"shift() distribution adding constant, multiply() distribution constant. flip() specific case multiplying distribution -1, resulting \"flipping\" distribution 0.","code":""},{"path":"https://distplyr.probaverse.com/reference/multiply.gpd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear Transformations — multiply.gpd","text":"","code":"multiply.gpd(distribution, constant)"},{"path":"https://distplyr.probaverse.com/reference/multiply.gpd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear Transformations — multiply.gpd","text":"distribution probability distribution. constant single numeric shift multiply distribution .","code":""},{"path":"https://distplyr.probaverse.com/reference/multiply.gpd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear Transformations — multiply.gpd","text":"distribution, shifted multiplied constant. Specifically, distribution subclass \"shift\", \"scale\", \"flip\".","code":""},{"path":"https://distplyr.probaverse.com/reference/multiply.gpd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear Transformations — multiply.gpd","text":"Specifically, X random variable coming distribution, resulting distributions follows: shift(), distribution X + constant. multiply(), distribution X * constant. flip(), distribution -X. Although multiply() function accepts negative constants, corresponding \"scale\" distribution class holds positive constants, delegating potential negative sign \"flip\" class.","code":""},{"path":"https://distplyr.probaverse.com/reference/multiply.gpd.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Linear Transformations — multiply.gpd","text":"can also use binary operations +, -, *, / access transformations.","code":""},{"path":[]},{"path":"https://distplyr.probaverse.com/reference/multiply.gpd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear Transformations — multiply.gpd","text":"","code":"d_pois <- distionary::dst_pois(1.1) d_norm <- distionary::dst_norm(4, 1) d_unif <- distionary::dst_unif(0, 1)  # Shift a Poisson distribution by 1. shift(d_pois, 1) #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 #>  d_pois + 1 #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 #>   # Multiply a Uniform distribution by 2. multiply(d_unif, 2) #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"unif\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"unif\" #>  #> $scale #> [1] 2 #>  d_unif * 2 #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"unif\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"unif\" #>  #> $scale #> [1] 2 #>   # Flip a Normal distribution. flip(d_norm) #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\" -d_norm #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\"  # Combine multiple operations: 4 - 2 * d_pois #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $scale #> [1] 2 #>  #>  #> $shift #> [1] 4 #>"},{"path":"https://distplyr.probaverse.com/reference/multiply.norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear Transformations — multiply.norm","title":"Linear Transformations — multiply.norm","text":"shift() distribution adding constant, multiply() distribution constant. flip() specific case multiplying distribution -1, resulting \"flipping\" distribution 0.","code":""},{"path":"https://distplyr.probaverse.com/reference/multiply.norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear Transformations — multiply.norm","text":"","code":"multiply.norm(distribution, constant)"},{"path":"https://distplyr.probaverse.com/reference/multiply.norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear Transformations — multiply.norm","text":"distribution probability distribution. constant single numeric shift multiply distribution .","code":""},{"path":"https://distplyr.probaverse.com/reference/multiply.norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear Transformations — multiply.norm","text":"distribution, shifted multiplied constant. Specifically, distribution subclass \"shift\", \"scale\", \"flip\".","code":""},{"path":"https://distplyr.probaverse.com/reference/multiply.norm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear Transformations — multiply.norm","text":"Specifically, X random variable coming distribution, resulting distributions follows: shift(), distribution X + constant. multiply(), distribution X * constant. flip(), distribution -X. Although multiply() function accepts negative constants, corresponding \"scale\" distribution class holds positive constants, delegating potential negative sign \"flip\" class.","code":""},{"path":"https://distplyr.probaverse.com/reference/multiply.norm.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Linear Transformations — multiply.norm","text":"can also use binary operations +, -, *, / access transformations.","code":""},{"path":[]},{"path":"https://distplyr.probaverse.com/reference/multiply.norm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear Transformations — multiply.norm","text":"","code":"d_pois <- distionary::dst_pois(1.1) d_norm <- distionary::dst_norm(4, 1) d_unif <- distionary::dst_unif(0, 1)  # Shift a Poisson distribution by 1. shift(d_pois, 1) #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 #>  d_pois + 1 #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 #>   # Multiply a Uniform distribution by 2. multiply(d_unif, 2) #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"unif\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"unif\" #>  #> $scale #> [1] 2 #>  d_unif * 2 #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"unif\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"unif\" #>  #> $scale #> [1] 2 #>   # Flip a Normal distribution. flip(d_norm) #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\" -d_norm #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\"  # Combine multiple operations: 4 - 2 * d_pois #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $scale #> [1] 2 #>  #>  #> $shift #> [1] 4 #>"},{"path":"https://distplyr.probaverse.com/reference/multiply.unif.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear Transformations — multiply.unif","title":"Linear Transformations — multiply.unif","text":"shift() distribution adding constant, multiply() distribution constant. flip() specific case multiplying distribution -1, resulting \"flipping\" distribution 0.","code":""},{"path":"https://distplyr.probaverse.com/reference/multiply.unif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear Transformations — multiply.unif","text":"","code":"multiply.unif(distribution, constant)"},{"path":"https://distplyr.probaverse.com/reference/multiply.unif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear Transformations — multiply.unif","text":"distribution probability distribution. constant single numeric shift multiply distribution .","code":""},{"path":"https://distplyr.probaverse.com/reference/multiply.unif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear Transformations — multiply.unif","text":"distribution, shifted multiplied constant. Specifically, distribution subclass \"shift\", \"scale\", \"flip\".","code":""},{"path":"https://distplyr.probaverse.com/reference/multiply.unif.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear Transformations — multiply.unif","text":"Specifically, X random variable coming distribution, resulting distributions follows: shift(), distribution X + constant. multiply(), distribution X * constant. flip(), distribution -X. Although multiply() function accepts negative constants, corresponding \"scale\" distribution class holds positive constants, delegating potential negative sign \"flip\" class.","code":""},{"path":"https://distplyr.probaverse.com/reference/multiply.unif.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Linear Transformations — multiply.unif","text":"can also use binary operations +, -, *, / access transformations.","code":""},{"path":[]},{"path":"https://distplyr.probaverse.com/reference/multiply.unif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear Transformations — multiply.unif","text":"","code":"d_pois <- distionary::dst_pois(1.1) d_norm <- distionary::dst_norm(4, 1) d_unif <- distionary::dst_unif(0, 1)  # Shift a Poisson distribution by 1. shift(d_pois, 1) #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 #>  d_pois + 1 #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 #>   # Multiply a Uniform distribution by 2. multiply(d_unif, 2) #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"unif\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"unif\" #>  #> $scale #> [1] 2 #>  d_unif * 2 #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"unif\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"unif\" #>  #> $scale #> [1] 2 #>   # Flip a Normal distribution. flip(d_norm) #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\" -d_norm #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\"  # Combine multiple operations: 4 - 2 * d_pois #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $scale #> [1] 2 #>  #>  #> $shift #> [1] 4 #>"},{"path":"https://distplyr.probaverse.com/reference/mutate_finite.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutate Discrete Values — mutate_finite","title":"Mutate Discrete Values — mutate_finite","text":"Transform discrete values finite distribution.","code":""},{"path":"https://distplyr.probaverse.com/reference/mutate_finite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutate Discrete Values — mutate_finite","text":"","code":"mutate_finite(distribution, location_expr)"},{"path":"https://distplyr.probaverse.com/reference/mutate_finite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutate Discrete Values — mutate_finite","text":"distribution Finite distribution. location_expr expression involving location.","code":""},{"path":"https://distplyr.probaverse.com/reference/mutate_finite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mutate Discrete Values — mutate_finite","text":"input distribution discrete values modified according expression location.","code":""},{"path":"https://distplyr.probaverse.com/reference/mutate_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutate Parameters — mutate_parameters","title":"Mutate Parameters — mutate_parameters","text":"Modify distribution parameters. lightweight function checks parameter modifying already exists distribution.","code":""},{"path":"https://distplyr.probaverse.com/reference/mutate_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutate Parameters — mutate_parameters","text":"","code":"mutate_parameters(distribution, ...)"},{"path":"https://distplyr.probaverse.com/reference/mutate_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutate Parameters — mutate_parameters","text":"distribution Parametric distribution ... Named expressions; quoted. Names parameters names distribution. Expressions can involve computations parameters.","code":""},{"path":"https://distplyr.probaverse.com/reference/mutate_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mutate Parameters — mutate_parameters","text":"input distribution, parameters modified specified ....","code":""},{"path":"https://distplyr.probaverse.com/reference/mutate_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mutate Parameters — mutate_parameters","text":"Parameters modified --fly. means parameters modified earlier ... still retain original values use downstream ....","code":""},{"path":"https://distplyr.probaverse.com/reference/mutate_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mutate Parameters — mutate_parameters","text":"","code":"d <- distionary::dst_unif(1, 3) distplyr:::mutate_parameters(d, min = max - min) #> [1] \"unif\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"unif\""},{"path":"https://distplyr.probaverse.com/reference/new_graft.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor function for graft distributions — new_graft","title":"Constructor function for graft distributions — new_graft","text":"Constructor function graft distributions","code":""},{"path":"https://distplyr.probaverse.com/reference/new_graft.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor function for graft distributions — new_graft","text":"","code":"new_graft(object, ..., class = character())"},{"path":"https://distplyr.probaverse.com/reference/new_graft.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor function for graft distributions — new_graft","text":"object special mixture conditional distributions. ... attributes add list. class making subclass, specify name .","code":""},{"path":"https://distplyr.probaverse.com/reference/new_graft.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Constructor function for graft distributions — new_graft","text":"graft distribution special case mixture distribution.","code":""},{"path":"https://distplyr.probaverse.com/reference/new_mix.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor function for ","title":"Constructor function for ","text":"Constructor function \"mix\" objects","code":""},{"path":"https://distplyr.probaverse.com/reference/new_mix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor function for ","text":"","code":"new_mix(l, variable, ..., class = character())"},{"path":"https://distplyr.probaverse.com/reference/new_mix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor function for ","text":"l List containing components mixture distribution object. variable Type random variable: \"continuous\", \"discrete\", \"mixed\". ... attributes add list. class making subclass, specify name .","code":""},{"path":"https://distplyr.probaverse.com/reference/ops_finite.html","id":null,"dir":"Reference","previous_headings":"","what":"Ops for a Finite Distribution — Ops.finite","title":"Ops for a Finite Distribution — Ops.finite","text":"Ops Finite Distribution","code":""},{"path":"https://distplyr.probaverse.com/reference/ops_finite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ops for a Finite Distribution — Ops.finite","text":"","code":"# S3 method for class 'finite' Ops(e1, e2)"},{"path":"https://distplyr.probaverse.com/reference/ops_finite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ops for a Finite Distribution — Ops.finite","text":"e1, e2 Objects left- right-hand sides binary operator, case unary operator, e1 argument.","code":""},{"path":"https://distplyr.probaverse.com/reference/ops_finite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ops for a Finite Distribution — Ops.finite","text":"transformed distribution. turns another finite distribution, original outcomes transformed specified Ops.","code":""},{"path":"https://distplyr.probaverse.com/reference/ops_finite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ops for a Finite Distribution — Ops.finite","text":"Although default Ops distributions defined wrapper around verbs shift(), multiply(), flip(), invert(), opposite true \"finite\" distributions. Ops.finite() can piggyback Ops defined vector finite observations.","code":""},{"path":"https://distplyr.probaverse.com/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://distplyr.probaverse.com/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://distplyr.probaverse.com/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://distplyr.probaverse.com/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://distplyr.probaverse.com/reference/shift.finite.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear Transformations — shift.finite","title":"Linear Transformations — shift.finite","text":"shift() distribution adding constant, multiply() distribution constant. flip() specific case multiplying distribution -1, resulting \"flipping\" distribution 0.","code":""},{"path":"https://distplyr.probaverse.com/reference/shift.finite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear Transformations — shift.finite","text":"","code":"shift.finite(distribution, constant)"},{"path":"https://distplyr.probaverse.com/reference/shift.finite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear Transformations — shift.finite","text":"distribution probability distribution. constant single numeric shift multiply distribution .","code":""},{"path":"https://distplyr.probaverse.com/reference/shift.finite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear Transformations — shift.finite","text":"distribution, shifted multiplied constant. Specifically, distribution subclass \"shift\", \"scale\", \"flip\".","code":""},{"path":"https://distplyr.probaverse.com/reference/shift.finite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear Transformations — shift.finite","text":"Specifically, X random variable coming distribution, resulting distributions follows: shift(), distribution X + constant. multiply(), distribution X * constant. flip(), distribution -X. Although multiply() function accepts negative constants, corresponding \"scale\" distribution class holds positive constants, delegating potential negative sign \"flip\" class.","code":""},{"path":"https://distplyr.probaverse.com/reference/shift.finite.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Linear Transformations — shift.finite","text":"can also use binary operations +, -, *, / access transformations.","code":""},{"path":[]},{"path":"https://distplyr.probaverse.com/reference/shift.finite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear Transformations — shift.finite","text":"","code":"d_pois <- distionary::dst_pois(1.1) d_norm <- distionary::dst_norm(4, 1) d_unif <- distionary::dst_unif(0, 1)  # Shift a Poisson distribution by 1. shift(d_pois, 1) #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 #>  d_pois + 1 #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 #>   # Multiply a Uniform distribution by 2. multiply(d_unif, 2) #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"unif\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"unif\" #>  #> $scale #> [1] 2 #>  d_unif * 2 #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"unif\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"unif\" #>  #> $scale #> [1] 2 #>   # Flip a Normal distribution. flip(d_norm) #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\" -d_norm #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\"  # Combine multiple operations: 4 - 2 * d_pois #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $scale #> [1] 2 #>  #>  #> $shift #> [1] 4 #>"},{"path":"https://distplyr.probaverse.com/reference/shift.gpd.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear Transformations — shift.gpd","title":"Linear Transformations — shift.gpd","text":"shift() distribution adding constant, multiply() distribution constant. flip() specific case multiplying distribution -1, resulting \"flipping\" distribution 0.","code":""},{"path":"https://distplyr.probaverse.com/reference/shift.gpd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear Transformations — shift.gpd","text":"","code":"shift.gpd(distribution, constant)"},{"path":"https://distplyr.probaverse.com/reference/shift.gpd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear Transformations — shift.gpd","text":"distribution probability distribution. constant single numeric shift multiply distribution .","code":""},{"path":"https://distplyr.probaverse.com/reference/shift.gpd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear Transformations — shift.gpd","text":"distribution, shifted multiplied constant. Specifically, distribution subclass \"shift\", \"scale\", \"flip\".","code":""},{"path":"https://distplyr.probaverse.com/reference/shift.gpd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear Transformations — shift.gpd","text":"Specifically, X random variable coming distribution, resulting distributions follows: shift(), distribution X + constant. multiply(), distribution X * constant. flip(), distribution -X. Although multiply() function accepts negative constants, corresponding \"scale\" distribution class holds positive constants, delegating potential negative sign \"flip\" class.","code":""},{"path":"https://distplyr.probaverse.com/reference/shift.gpd.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Linear Transformations — shift.gpd","text":"can also use binary operations +, -, *, / access transformations.","code":""},{"path":[]},{"path":"https://distplyr.probaverse.com/reference/shift.gpd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear Transformations — shift.gpd","text":"","code":"d_pois <- distionary::dst_pois(1.1) d_norm <- distionary::dst_norm(4, 1) d_unif <- distionary::dst_unif(0, 1)  # Shift a Poisson distribution by 1. shift(d_pois, 1) #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 #>  d_pois + 1 #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 #>   # Multiply a Uniform distribution by 2. multiply(d_unif, 2) #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"unif\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"unif\" #>  #> $scale #> [1] 2 #>  d_unif * 2 #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"unif\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"unif\" #>  #> $scale #> [1] 2 #>   # Flip a Normal distribution. flip(d_norm) #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\" -d_norm #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\"  # Combine multiple operations: 4 - 2 * d_pois #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $scale #> [1] 2 #>  #>  #> $shift #> [1] 4 #>"},{"path":"https://distplyr.probaverse.com/reference/shift.norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear Transformations — shift.norm","title":"Linear Transformations — shift.norm","text":"shift() distribution adding constant, multiply() distribution constant. flip() specific case multiplying distribution -1, resulting \"flipping\" distribution 0.","code":""},{"path":"https://distplyr.probaverse.com/reference/shift.norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear Transformations — shift.norm","text":"","code":"shift.norm(distribution, constant)"},{"path":"https://distplyr.probaverse.com/reference/shift.norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear Transformations — shift.norm","text":"distribution probability distribution. constant single numeric shift multiply distribution .","code":""},{"path":"https://distplyr.probaverse.com/reference/shift.norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear Transformations — shift.norm","text":"distribution, shifted multiplied constant. Specifically, distribution subclass \"shift\", \"scale\", \"flip\".","code":""},{"path":"https://distplyr.probaverse.com/reference/shift.norm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear Transformations — shift.norm","text":"Specifically, X random variable coming distribution, resulting distributions follows: shift(), distribution X + constant. multiply(), distribution X * constant. flip(), distribution -X. Although multiply() function accepts negative constants, corresponding \"scale\" distribution class holds positive constants, delegating potential negative sign \"flip\" class.","code":""},{"path":"https://distplyr.probaverse.com/reference/shift.norm.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Linear Transformations — shift.norm","text":"can also use binary operations +, -, *, / access transformations.","code":""},{"path":[]},{"path":"https://distplyr.probaverse.com/reference/shift.norm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear Transformations — shift.norm","text":"","code":"d_pois <- distionary::dst_pois(1.1) d_norm <- distionary::dst_norm(4, 1) d_unif <- distionary::dst_unif(0, 1)  # Shift a Poisson distribution by 1. shift(d_pois, 1) #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 #>  d_pois + 1 #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 #>   # Multiply a Uniform distribution by 2. multiply(d_unif, 2) #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"unif\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"unif\" #>  #> $scale #> [1] 2 #>  d_unif * 2 #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"unif\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"unif\" #>  #> $scale #> [1] 2 #>   # Flip a Normal distribution. flip(d_norm) #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\" -d_norm #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\"  # Combine multiple operations: 4 - 2 * d_pois #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $scale #> [1] 2 #>  #>  #> $shift #> [1] 4 #>"},{"path":"https://distplyr.probaverse.com/reference/shift.unif.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear Transformations — shift.unif","title":"Linear Transformations — shift.unif","text":"shift() distribution adding constant, multiply() distribution constant. flip() specific case multiplying distribution -1, resulting \"flipping\" distribution 0.","code":""},{"path":"https://distplyr.probaverse.com/reference/shift.unif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear Transformations — shift.unif","text":"","code":"shift.unif(distribution, constant)"},{"path":"https://distplyr.probaverse.com/reference/shift.unif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear Transformations — shift.unif","text":"distribution probability distribution. constant single numeric shift multiply distribution .","code":""},{"path":"https://distplyr.probaverse.com/reference/shift.unif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear Transformations — shift.unif","text":"distribution, shifted multiplied constant. Specifically, distribution subclass \"shift\", \"scale\", \"flip\".","code":""},{"path":"https://distplyr.probaverse.com/reference/shift.unif.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear Transformations — shift.unif","text":"Specifically, X random variable coming distribution, resulting distributions follows: shift(), distribution X + constant. multiply(), distribution X * constant. flip(), distribution -X. Although multiply() function accepts negative constants, corresponding \"scale\" distribution class holds positive constants, delegating potential negative sign \"flip\" class.","code":""},{"path":"https://distplyr.probaverse.com/reference/shift.unif.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Linear Transformations — shift.unif","text":"can also use binary operations +, -, *, / access transformations.","code":""},{"path":[]},{"path":"https://distplyr.probaverse.com/reference/shift.unif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear Transformations — shift.unif","text":"","code":"d_pois <- distionary::dst_pois(1.1) d_norm <- distionary::dst_norm(4, 1) d_unif <- distionary::dst_unif(0, 1)  # Shift a Poisson distribution by 1. shift(d_pois, 1) #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 #>  d_pois + 1 #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $shift #> [1] 1 #>   # Multiply a Uniform distribution by 2. multiply(d_unif, 2) #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"unif\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"unif\" #>  #> $scale #> [1] 2 #>  d_unif * 2 #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"unif\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"unif\" #>  #> $scale #> [1] 2 #>   # Flip a Normal distribution. flip(d_norm) #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\" -d_norm #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"norm\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"norm\"  # Combine multiple operations: 4 - 2 * d_pois #> [1] \"shift\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"negative\" \"dst\"      #>  #>  distribution : #> [1] \"scale\" \"dst\"   #>  #>  components : #> $distribution #> [1] \"pois\"       \"parametric\" \"dst\"        #>  #>  name : #> [1] \"pois\" #>  #> $scale #> [1] 2 #>  #>  #> $shift #> [1] 4 #>"},{"path":"https://distplyr.probaverse.com/reference/slice.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Distributions — slice_left","title":"Conditional Distributions — slice_left","text":"slice_left() removes probability left breakpoint, conditioning random variable bigger breakpoint. slice_right() opposite: removes probability right, conditioning smaller breakpoint.","code":""},{"path":"https://distplyr.probaverse.com/reference/slice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Distributions — slice_left","text":"","code":"slice_left(distribution, breakpoint, include = TRUE, ...)  slice_right(distribution, breakpoint, include = TRUE, ...)"},{"path":"https://distplyr.probaverse.com/reference/slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Distributions — slice_left","text":"distribution Distribution slice. breakpoint Point slice (single numeric). include Logical; breakpoint removed well? realistically relevant breakpoint non-zero probability occurrence. ... arguments pass specific methods. Currently unused.","code":""},{"path":"https://distplyr.probaverse.com/reference/slice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditional Distributions — slice_left","text":"conditional distribution.","code":""},{"path":"https://distplyr.probaverse.com/reference/slice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional Distributions — slice_left","text":"","code":"library(magrittr) distionary::dst_norm(0, 1) %>%   slice_left(-2) %>%   slice_right(2) %>%   distionary::enframe_cdf(at = -3:3) #> # A tibble: 7 × 2 #>    .arg   cdf #>   <int> <dbl> #> 1    -3 0     #> 2    -2 0     #> 3    -1 0.142 #> 4     0 0.5   #> 5     1 0.858 #> 6     2 1     #> 7     3 1      d <- distionary::dst_empirical(c(2, 5, 6, 9, 11)) d %>%   slice_left(5) %>%   distionary::eval_pmf(at = 5) #> [1] 0 d %>%   slice_left(5, include = TRUE) %>%   distionary::eval_pmf(at = 5) #> [1] 0"},{"path":"https://distplyr.probaverse.com/news/index.html","id":"distplyr-015","dir":"Changelog","previous_headings":"","what":"distplyr 0.1.5","title":"distplyr 0.1.5","text":"Updates package infrastructure process migrating new GitHub Organization.","code":""},{"path":"https://distplyr.probaverse.com/news/index.html","id":"distplyr-014","dir":"Changelog","previous_headings":"","what":"distplyr 0.1.4","title":"distplyr 0.1.4","text":"Fix graft distributions can evaluate NA.","code":""},{"path":"https://distplyr.probaverse.com/news/index.html","id":"distplyr-013","dir":"Changelog","previous_headings":"","what":"distplyr 0.1.3","title":"distplyr 0.1.3","text":"Default evaluation methods, base distributional forms, moved new package, distionary. distplyr focusses manipulation verbs . Math method now applies finite distributions. Ops methods now available arithmetic operations (+, -, *, /) single distribution, along verbs shift(), multiply(), invert(), flip(). graft_left() graft_right() fully functional, slice_left() slice_right() now also available.","code":""},{"path":"https://distplyr.probaverse.com/news/index.html","id":"distplyr-012","dir":"Changelog","previous_headings":"","what":"distplyr 0.1.2","title":"distplyr 0.1.2","text":"tibble package installed, distplyr now output tibbles wherever data frames previously output.","code":""},{"path":"https://distplyr.probaverse.com/news/index.html","id":"breaking-changes-0-1-2","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"distplyr 0.1.2","text":"now, get_ prefix still holds distributional representations, like get_cdf(). Make distribution object distribution() instead dst(), checked is_distribution().","code":""},{"path":"https://distplyr.probaverse.com/news/index.html","id":"distplyr-011","dir":"Changelog","previous_headings":"","what":"distplyr 0.1.1","title":"distplyr 0.1.1","text":"patch fixes problems previous release, well offering step towards bigger expansion. Changed random number generation randfn, functional representation, realise() realize() functions. Changed probfn representation specific: pmf density Added enframe suite functions. Implement beginnings able specify distribution, set_ suite functions, making empty distribution dst(). Additionally, ’s internal rearrangement, get functions call eval functions, vice versa.","code":""},{"path":"https://distplyr.probaverse.com/news/index.html","id":"distplyr-010","dir":"Changelog","previous_headings":"","what":"distplyr 0.1.0","title":"distplyr 0.1.0","text":"first version distplyr now available! functionality rather limited moment, still useful, especially capability handle discrete component distribution. main features: Base distributions include step distributions, Gaussian, Uniform, generalized Pareto. Operations include grafting (right) mixing Distribution properties included moment-related quantities, extreme value index. Distribution representations mostly comprehensive, perhaps missing mean excess function moment generating function. Take look “Vision” vignette get sense package headed.","code":""}]
